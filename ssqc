#!/bin/bash -e
## ssqc <path/to/parm.file>
## parm.file: 
## paired-end	true or false if sequence is paired end (note: collaps samples that cross lanes e.g., cat <name-L00[1-4]-R1.fastq.gz > name-R1.fastq.gz)
## fastq-files	</path/to/file> contains a list of fastq.gz files, paired ends alternate with naming convension name-R1.fastq.gz and name-R2.fastq.gz
## is_input	<integer> copies of internal standard added to sample.
## cc_expected	<integer> determined after several runs..expected count of unique CC sequences when no significant NT competition.
## nt2is </path/to/file> contains the mapping of NT to IS, base changes in lowercase
## ref </path/to/files> path to the reference genome
## split <true/false> determine if the NT and IS reads are to divided into separate bam and fastq
##
## viral load calculated from total amplicon reads (NT + recombinants/2) / (IS + recombinant/2) * IS_INPUT
##   total recombinant amplicon reads should be half NT and half IS, hence the recombinant/2 contribution.
## coverage is calculated using bamstats amplicon counting method

while read -r val;do
	if [[ "$val" =~ ^paired-end ]];then 
		if [[ "$val" =~ true$ ]];then
			pe=1
		else
			pe=0	
		fi
	fi
	if [[ "$val" =~ fastq-files ]];then
		input="$(cut -f2 <<< "$val")"
		if [ ! -f "$input" ]; then
			echo "Pathway to fastq list file incorrect"
			exit 1
		fi
	fi
        if [[ "$val" =~ is_input ]];then
                is_input="$(cut -f2 <<< "$val")"
        fi
	if [[ "$val" =~ cc_expected ]];then
		cc_expected="$(cut -f2 <<< "$val")"
	fi
	if [[ "$val" =~ ^nt2is ]];then
		nt2is="$(cut -f2 <<< "$val")"
                if [ ! -f "$nt2is" ]; then
                        echo "Pathway to NT to IS mapping table incorrect"
                        exit 1
                fi
	fi
        if [[ "$val" =~ ^ref ]];then
                ref="$(cut -f2 <<< "$val")"
                if [ ! -f "$ref" ]; then
                        echo "Pathway to NT to IS mapping table incorrect"
                        exit 1
                fi
        fi
        if [[ "$val" =~ ^split ]];then
                if [[ "$val" =~ true$ ]];then
                        splitSeq=1
                else
                        splitSeq=0
                fi
        fi

done < "$1"

pi=$(dirname "$input")
runQC="${pi}/runQC.txt"
coverage="${pi}/coverage.txt"
viralLoad="${pi}/viralLoad.txt"
echo -e "SAMPLE\tPOOL\tNT_READS\tIS_READS\tCC_READS\tCCQC" > "$runQC"
#echo -e "SAMPLE\tNT_READS\tIS_READS\tREC_READS\tNT_AVG\tIS_AVG\tREC_AVG" > "$coverage"
echo -e "SAMPLE\tNT_READS\tIS_READS\tREC_READS\tIS_INPUT\tVIRAL_LOAD" > "$viralLoad"

while read -r line; do
if [[ ! "$line" =~ ^# ]];then
echo $line
	pi=$(dirname "$line")
	fp=$(basename "$line")
	[ ${fp%%*.} == "gz" ] && { fn=${fp%.gz}; fe="gz"; } || { fn=${fp%.fastq.gz}; fe="fastq.gz"; }
	[ ${fp%%*.} == "fastq" ] && { fn=${fp%.fastq}; fe="fastq"; }
	[[ $fe != "fastq.gz" && $fe != "fastq" ]] && { echo "Bad file extention for $fp, must be .fastq or .fastq.gz"; exit 1; }	
 
#echo "Aligning..."
#	rg='@RG\tID:$fn\tSM:$fn\tLB:NA\tPL:SNAQ'
#	if [ $pe == 1 ];then
#		read -r line2
# 		bwa mem -R $rg -t 32 $ref $line $line2 | samtools sort -@1G -o "${pi}/${fn}.bam" -  
#	else
#		bwa mem -R $rg -t 32 $ref $line | samtools sort -@1G -o "${pi}/${fn}.bam" -
#	fi	
#	./remRecombo "$nt2is" "${pi}/${fn}.bam" $splitSeq

#	rm -f "${pi}/${fn}.bam"
samtools index "${pi}/${fn}.bam"

	rm -f "${pi}/${fn}-rsort.temp"

#	./coverage "${pi}/${fn}" "$coverage"

	awk -v output="$runQC" -v cc_expected=$cc_expected -v is_input=$is_input '{ if($2==1) {pn="1"} else if ($2==2) {pn="2"} else {pn="0"}
	if (pn != 0) {printf "%s\t%s\t%i\t%i\t%i", $1, pn,$4,$5,$3 >> output
		if($5+$4==0){printf "\t%s\n", "ND" >> output} else {printf "\t%f\n",($5/($5+$4)*$3)/cc_expected >> output}
		#old viral load calc if($5==0){printf "\t%s\n", "ND" >> output} else {printf "\t%i\n" , $4/$5*is_input >> output}
		}
	}' "${pi}/${fn}.bam_CC-read-counts.txt"
	

	
	#	./remPrimers "/NGS/sanger/REFS/ActicV3-bamClipper.bed" "${pi}/${fn}-good.bam"
#	./realign.2 "${pi}/${fn}-good.hc.bam"
#	/NGS/VC "${pi}/${fn}-good.hc.ra.bam"
fi
done < "$input"
awk -v is_input=$is_input -v vl="$viralLoad" 'FNR==1 {next}
{
	if ($3+$4==0) {
                vlr="ND"
        } else {
                vlr=( $2 + ($4 / 2) )/($3 + ($4 / 2) ) * is_input
        }
        printf "%s\t%i\t%i\t%i\t%i\t%.1f\n", $1, $2 , $3 , $4 , is_input , vlr >> vl
}' "${pi}/coverage.txt"

echo "DONE."
