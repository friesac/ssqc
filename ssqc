#!/bin/bash -e
## ssqc <path/to/parm.file>
## parm.file: 
## paired-end	true or false if sequence is paired end (note: collaps samples that cross lanes e.g., cat <name-L00[1-4]-R1.fastq.gz > name-R1.fastq.gz)
## fastq-files	</path/to/file> contains a list of fastq.gz files, paired ends alternate with naming convension name-R1.fastq.gz and name-R2.fastq.gz
## is_input	<integer> copies of internal standard added to sample.
## cc_expected	<integer> determined after several runs..expected count of unique CC sequences when no significant NT competition.
## nt2is </path/to/file> contains the mapping of NT to IS, base changes in lowercase
## ref </path/to/files> path to the reference genome

while read -r val;do
	if [[ "$val" =~ ^paired-end ]];then 
		if [[ "$val" =~ true$ ]];then
			pe=1
		else
			pe=0	
		fi
	fi
	if [[ "$val" =~ fastq-files ]];then
		input="$(cut -f2 <<< "$val")"
		if [ ! -f "$input" ]; then
			echo "Pathway to fastq list file incorrect"
			exit 1
		fi
	fi
        if [[ "$val" =~ is_input ]];then
                is_input="$(cut -f2 <<< "$val")"
        fi
	if [[ "$val" =~ cc_expected ]];then
		cc_expected="$(cut -f2 <<< "$val")"
	fi
	if [[ "$val" =~ ^nt2is ]];then
		nt2is="$(cut -f2 <<< "$val")"
                if [ ! -f "$nt2is" ]; then
                        echo "Pathway to NT to IS mapping table incorrect"
                        exit 1
                fi
	fi
        if [[ "$val" =~ ^ref ]];then
                ref="$(cut -f2 <<< "$val")"
                if [ ! -f "$ref" ]; then
                        echo "Pathway to NT to IS mapping table incorrect"
                        exit 1
                fi
        fi
        if [[ "$val" =~ ^split ]];then
                if [[ "$val" =~ true$ ]];then
                        splitSeq=1
                else
                        splitSeq=0
                fi
        fi

done < "$1"
while read -r line; do
if [[ ! "$line" =~ ^# ]];then
	echo $line
	pi=$(dirname "$line")
	fp=$(basename "$line")
	[ ${fp%%*.} == "gz" ] && { fn=${fp%.gz}; fe="gz"; } || { fn=${fp%.fastq.gz}; fe="fastq.gz"; }
	[ ${fp%%*.} == "fastq" ] && { fn=${fp%.fastq}; fe="fastq"; }
	[[ $fe != "fastq.gz" && $fe != "fastq" ]] && { echo "Bad file extention for $fp, must be .fastq or .fastq.gz"; exit 1; }	
        echo "Aligning $fn..."
	if [ $pe == 1 ];then
		read -r line2
 		bwa mem -t 32 $ref $line $line2 | samtools sort -@1G -o "${pi}/${fn}.bam" -  
	else
		bwa mem -t 32 $ref $line | samtools sort -@1G -o "${pi}/${fn}.bam" -
	fi	
	./remRecombo "$nt2is" "${pi}/${fn}.bam" $splitSeq
	rm -f "${pi}/${fn}.bam"	
#	./remPrimers "/NGS/sanger/REFS/ActicV3-bamClipper.bed" "${pi}/${fn}-good.bam"
#	./realign.2 "${pi}/${fn}-good.hc.bam"
#	/NGS/VC "${pi}/${fn}-good.hc.ra.bam"
fi

done < "$input"
