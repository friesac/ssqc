#!/bin/bash -e
## ssqc <path/to/parm.file>
## parm.file: 
##   paired-end	true or false if sequence is paired end (note: collaps samples that cross lanes e.g., cat <name-L00[1-4]-R1.fastq.gz > name-R1.fastq.gz)
##   fastq-files	</path/to/file> contains a list of fastq.gz files, paired ends alternate with naming convension name-R1.fastq.gz and name-R2.fastq.gz
##   is_input	<integer> copies of internal standard added to sample.
##   cc_expected	<integer> determined after several runs..expected count of unique CC sequences when no significant NT competition.
##   nt2is </path/to/file> contains the mapping of NT to IS, base changes in lowercase
##   ref </path/to/files> path to the reference genome
##   split <true/false> determine if the NT and IS reads are to divided into separate bam and fastq
##
## Program flow: read parameters; align reads; call remRecombinants; calculate coverage; create runQC table; calculate viral load
## viral load calculated from total amplicon reads (NT + recombinants/2) / (IS + recombinant/2) * IS_INPUT
##   Total recombinant amplicon reads should be half NT and half IS, hence the recombinant/2 contribution.
## runQC uses the NT and IS CC-reads to adjust expected complexity capture (cc_expected) for competition.  Unique CC sequences calculated from -CC-counts.txt
## Coverage calculated using bamstats amplicon counting method

while read -r val;do
	if [[ "$val" =~ ^paired-end ]];then 
		if [[ "$val" =~ true$ ]];then
			pe=1
		else
			pe=0	
		fi
	fi
	if [[ "$val" =~ fastq-files ]];then
		input="$(cut -f2 <<< "$val")"
		if [ ! -f "$input" ]; then
			echo "Pathway to fastq list file incorrect"
			exit 1
		fi
	fi
        if [[ "$val" =~ is_input ]];then
                is_input="$(cut -f2 <<< "$val")"
        fi
	if [[ "$val" =~ cc_expected ]];then
		cc_expected="$(cut -f2 <<< "$val")"
	fi
	if [[ "$val" =~ ^nt2is ]];then
		nt2is="$(cut -f2 <<< "$val")"
                if [ ! -f "$nt2is" ]; then
                        echo "Pathway to NT to IS mapping table incorrect"
                        exit 1
                fi
	fi
        if [[ "$val" =~ ^ref ]];then
                ref="$(cut -f2 <<< "$val")"
                if [ ! -f "$ref" ]; then
                        echo "Pathway to NT to IS mapping table incorrect"
                        exit 1
                fi
        fi
        if [[ "$val" =~ ^split ]];then
                if [[ "$val" =~ true$ ]];then
                        splitSeq=1
                else
                        splitSeq=0
                fi
        fi

done < "$1"

pi=$(dirname "$input");pi="$pi/snaq"
[ ! -d "$pi" ] && mkdir "$pi"
runQC="${pi}/runQC.txt"
coverage="${pi}/coverage.txt"
viralLoad="${pi}/viralLoad.txt"
refBN=$(basename "$ref")

[ -f "$runQC" ] && echo "APPENDING TO $runQC" || echo -e "SAMPLE\tPOOL\tNT_READS\tIS_READS\tCC_READS\tCC_UNIQ\tCCQC" > "$runQC"
[ -f "$viralLoad" ] && echo "APPENDING TO $viralLoad" || echo -e "SAMPLE\tNT_READS\tIS_READS\tREC_READS\tIS_INPUT\tVIRAL_LOAD" > "$viralLoad"
[ -f "$coverage" ] && mv "$coverage" "$coverage.bak" || echo -e "SAMPLE\tNT_READS\tIS_READS\tREC_READS\tNT_AVG\tIS_AVG\tREC_AVG" > "$coverage"

while read -r line; do
if [[ ! "$line" =~ ^# ]];then
	echo $line
	fp=$(basename "$line")
	# if bam files, make fastq for bwa
	if [[ ${line: -4} == ".bam" ]];then
		fn=${fp%.bam}; fe="fastq.gz"
		
		if $( samtools view -H "$line" | grep -q "$refBN" ); then
			#aligned bam
			ln -f "$line" "$pi"
			fbam=2
			echo "Skipping alignment..."
		else
			fbam=1
			if [[ $pe == 1 ]];then
				echo "bam to paired fastq..."
                		samtools sort -n "$line" -o "${pi}/${fn}-rsort.temp" -O bam -@ 32 -m 1G
                		samtools fastq -1 "${pi}/${fn}-R1.fastq.gz" -2 "${pi}/${fn}-R2.fastq.gz" -s "${pi}/${fn}-R0.fastq.gz" "${pi}/${fn}-rsort.temp"
				ip1="${pi}/${fn}-R1.fastq.gz"; ip2="${pi}/${fn}-R2.fastq.gz"
			else
				echo "bam to single fastq..."
	                	samtools fastq -0 "${pi}/${fn}-R1.fastq.gz" "$line"
				ip1="${pi}/${fn}-R1.fastq.gz"
			fi
		fi
	else
		ip1="$line"
		fbam=0
		# if fastq, determine if .gz
		if [[ ${fp: -9} == ".fastq.gz" ]]; then
			fn=${fp%.fastq.gz}; fe="fastq.gz"; 
		elif [[ ${fp: -6} == ".fastq" ]]; then
			fn=${fp%.fastq}; fe="fastq"; 
		else 
			echo "Bad file extention for $fp, must be .fastq or .fastq.gz"
			exit 1
		fi	
 	fi

	rg='@RG\tID:$fn\tSM:$fn\tLB:NA\tPL:SNAQ'
	if [[ $pe == 1 && $fbam != 2 ]];then
		[[ $fbam == 0 ]] && read -r ip2
 		 echo "Paired end aligning..."
		 bwa mem -R $rg -t 32 $ref "$ip1" "$ip2" | samtools sort -@1G -o "${pi}/${fn}.bam" -  
	elif [[ $fbam != 2 ]] ;then
		 echo "Single end aligning..."
		 bwa mem -R $rg -t 32 $ref "$ip1" | samtools sort -@1G -o "${pi}/${fn}.bam" -
	fi	

	./remRecombo "$nt2is" "${pi}/${fn}.bam" $splitSeq

#	rm -f "${pi}/${fn}.bam"
samtools index "${pi}/${fn}.bam"

	rm -f "${pi}/${fn}-rsort.temp"
echo "Coverage..."
	./coverage "${pi}/${fn}" "$coverage"
echo "CC QC..."
	awk -v output="$runQC" -v cc_expected=$cc_expected -v is_input=$is_input '{if($2 == 1) {
		printf "%s\t%s\t%i\t%i\t%i\t%i", $1, "1",$4,$5,$6,$3 >> output
                if($5+$4==0){printf "\t%s\n", "ND" >> output} else {printf "\t%f\n",($5/($5+$4)*$3)/cc_expected >> output}
	} else if($2 == 2) {
		printf "%s\t%s\t%i\t%i\t%i\t%i", $1, "2",$7,$8,$9,$3 >> output
                if($7+$8==0){printf "\t%s\n", "ND" >> output} else {printf "\t%f\n",($8/($8+$7)*$3)/cc_expected >> output}
	#old viral load calc if($5==0){printf "\t%s\n", "ND" >> output} else {printf "\t%i\n" , $4/$5*is_input >> output}
	}}' "${pi}/${fn}.bam_CC-read-counts.txt"
	
#rm -f "${pi}/${fn}.bam_CC-read-counts.txt"

#possible code for VAF QC
#	./remPrimers "/NGS/sanger/REFS/ActicV3-bamClipper.bed" "${pi}/${fn}-good.bam"
#	./realign.2 "${pi}/${fn}-good.hc.bam"
#	/NGS/VC "${pi}/${fn}-good.hc.ra.bam"
fi
done < "$input"
echo "Calculating viral load..."
awk -v is_input=$is_input -v vl="$viralLoad" 'FNR==1 {next}
{
	if ($3+$4==0) {
                vlr="ND"
        } else {
                vlr=( $2 + ($4 / 2) )/($3 + ($4 / 2) ) * is_input
        }
        printf "%s\t%i\t%i\t%i\t%i\t%.1f\n", $1, $2 , $3 , $4 , is_input , vlr >> vl
}' "$coverage"

#rm -f "${pi}/coverage.txt"
echo "DONE."
